┌─ Summary ──────────────────────────────────────────────────────────────────┐
│                                                                            │
│  Efficient implementations of algorithms for combinatorial (un)ranking of  │
│  bounded integer compositions, which are sometimes used in applied         │
│  cryptography (cf. hash-based signatures and sum-preserving encryption).   │
│                                                                            │
│  The implementations are based on the recent addition of `_BitInt`, which  │
│  are bit-precise integer types, to C (N2763, standardized in C23). This is │
│  an alternative to arithmetic backends for use cases where the underlying  │
│  library is not available or cannot be used.                               │
│                                                                            │
└────────────────────────────────────────────────────────────────────────────┘

┌─ Prerequisites ────────────────────────────────────────────────────────────┐
│                                                                            │
│  A GNU `make` binary is needed to invoke the rules. Support for `_BitInt`  │
│  was added in GCC 14 and Clang 16.                                         │
│                                                                            │
│  For other arithmetic backends, which are provided to compare the          │
│  performance, a C++ compiler is needed (not necessarily as recent as the   │
│  ones above). The backends are exposed through Boost [1]; the necessary    │
│  dependencies for each must be installed in the system.                    │
│                                                                            │
└────────────────────────────────────────────────────────────────────────────┘

┌─ Usage ────────────────────────────────────────────────────────────────────┐
│                                                                            │
│  Type `make BACKEND=$INT $TARGET` to compile the code, where $INT is one   │
│  of {bitint,boost-fix,boost-arb,mpz,tom}, and $TARGET is the basename of   │
│  a file in the `bin` folder.                                               │
│                                                                            │
│  A simple CLI is given at `bin/cli.c` and, after compiled, can be executed │
│  without flags to see the available options. It will unrank a random       │
│  integer to a composition and rank it back, asserting that the functions   │
│  work correctly, showing performance stats and other information.          │
│                                                                            │
│  Other variables that control the behavior of the program can also be      │
│  passed to the Makefile to experiment with specific parameters. For        │
│  instance, the command                                                     │
│                                                                            │
│    make clean BACKEND=boost-fix ORDER=colex ALG=ps IT=1024 CACHE=bin       │
│       cli-256                                                              │
│                                                                            │
│  will run tests for the unranking algorithm to the co-lexicographic order  │
│  which reuses partial sums, using a wide Boost fixed-integer type for the  │
│  arithmetic [1], with a pre-computed cache of binomial coefficients, for   │
│  1024 repetitions at the 256-bit security level.                           │
│                                                                            │
│  A program that tests every combination of flags is given at `bin/test.c`. │
│  Type `make BACKEND=$INT run-tests` to execute a standard test suite.      │
│                                                                            │
│  Type `make BACKEND=$INT leak` to assert that the code is free of memory   │
│  leaks via Valgrind.                                                       │
│                                                                            │
└────────────────────────────────────────────────────────────────────────────┘

┌─ Helper scripts ───────────────────────────────────────────────────────────┐
│                                                                            │
│  * `plot-results.sh` uses Gnuplot to show the relative performance of      │
│    each (un)ranking algorithm by order, cache type and security level.     │
│                                                                            │
│  * `plot-from-dhat.py` uses a modified version of Valgrind's Dynamic Heap  │
│     Analysis Tool (DHAT) to show cache access statistics for larger data   │
│     structures. These modifications can be found at [2]; the binary can    │
│     be used here via the `VALGRIND_PATH` Makefile variable.                │
│                                                                            │
└────────────────────────────────────────────────────────────────────────────┘

[1] https://www.boost.org/doc/libs/latest/libs/multiprecision/doc/html/boost_multiprecision/tut/ints.html
[2] https://gist.github.com/zambonin/6b84e03bd03b6bef0f82dadbb3ce02f6
